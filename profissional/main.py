# === main.py ===
"""
Pipeline Rashid‚ÄìTal: An√°lise de Xadrez T√°tico
==============================================

Extrai features t√°ticas de partidas PGN usando Stockfish.
Detecta sacrif√≠cios, iniciativa e padr√µes estilo Tal/Nezhmetdinov.

Uso b√°sico:
    python main.py --pgn_folder ./pgns

Uso avan√ßado:
    python main.py --pgn_folder ./pgns \\
                   --engine_path /usr/local/bin/stockfish \\
                   --depth 15 \\
                   --output dataset_custom.csv \\
                   --no-cache
"""

import argparse
import sys
from pathlib import Path
from typing import Optional

from config import PipelineConfig, EngineConfig, AnalysisConfig, OutputConfig
from logger import init_logger
from pipeline import RashidTalPipeline


def parse_arguments():
    """Parse argumentos da linha de comando."""
    parser = argparse.ArgumentParser(
        description='Pipeline Rashid‚ÄìTal: An√°lise t√°tica de xadrez',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemplos:
  # B√°sico
  python main.py --pgn_folder ./tal_games

  # Customizado
  python main.py --pgn_folder ./pgns \\
                 --engine_path D:\\stockfish\\sf.exe \\
                 --depth 15 \\
                 --output resultados.csv

  # Teste r√°pido (profundidade 10)
  python main.py --pgn_folder ./pgns --quick
        """
    )

    # Obrigat√≥rio
    parser.add_argument(
        '--pgn_folder',
        type=Path,
        required=True,
        help='Pasta contendo arquivos .pgn para an√°lise'
    )

    # Engine
    parser.add_argument(
        '--engine_path',
        type=Path,
        help='Caminho para execut√°vel do Stockfish (usa config.py se omitido)'
    )
    parser.add_argument(
        '--depth',
        type=int,
        default=13,
        help='Profundidade de an√°lise da engine (padr√£o: 13)'
    )
    parser.add_argument(
        '--threads',
        type=int,
        default=1,
        help='Threads da engine (padr√£o: 1)'
    )
    parser.add_argument(
        '--hash',
        type=int,
        default=128,
        help='Tamanho hash da engine em MB (padr√£o: 128)'
    )

    # Output
    parser.add_argument(
        '--output',
        type=Path,
        help='Caminho para CSV de sa√≠da (padr√£o: dataset_rashid_tal.csv)'
    )
    parser.add_argument(
        '--no-json',
        action='store_true',
        help='Desabilita gera√ß√£o de JSON'
    )
    parser.add_argument(
        '--no-progress',
        action='store_true',
        help='Desabilita barra de progresso'
    )

    # An√°lise
    parser.add_argument(
        '--sacrifice-threshold',
        type=float,
        default=150.0,
        help='Threshold material para sacrif√≠cio em centipawns (padr√£o: 150)'
    )
    parser.add_argument(
        '--initiative-threshold',
        type=float,
        default=80.0,
        help='Threshold eval para iniciativa em centipawns (padr√£o: 80)'
    )

    # Performance
    parser.add_argument(
        '--no-cache',
        action='store_true',
        help='Desabilita cache de posi√ß√µes'
    )

    # Modos especiais
    parser.add_argument(
        '--quick',
        action='store_true',
        help='Modo r√°pido: depth 10, limite de tempo'
    )
    parser.add_argument(
        '--debug',
        action='store_true',
        help='Habilita logging detalhado'
    )

    return parser.parse_args()


def build_config(args) -> PipelineConfig:
    """Constr√≥i configura√ß√£o a partir dos argumentos."""

    # Modo r√°pido
    if args.quick:
        config = PipelineConfig.for_quick_test()
    else:
        config = PipelineConfig.from_defaults()

    # Engine
    if args.engine_path:
        config.engine.path = args.engine_path
    config.engine.depth = args.depth
    config.engine.threads = args.threads
    config.engine.hash_mb = args.hash

    # An√°lise
    config.analysis.sacrifice_material_threshold = args.sacrifice_threshold
    config.analysis.initiative_eval_threshold = args.initiative_threshold

    # Output
    if args.output:
        config.output.csv_path = args.output
        # Ajusta JSON e summary paths automaticamente
        base = args.output.stem
        config.output.json_path = args.output.with_stem(base).with_suffix('.json')

    config.output.enable_json = not args.no_json
    config.output.enable_progress = not args.no_progress

    # Performance
    config.enable_cache = not args.no_cache

    return config


def main():
    """Fun√ß√£o principal."""
    args = parse_arguments()

    # Valida pasta PGN
    if not args.pgn_folder.exists():
        print(f"‚ùå Erro: Pasta n√£o encontrada: {args.pgn_folder}", file=sys.stderr)
        sys.exit(1)

    if not args.pgn_folder.is_dir():
        print(f"‚ùå Erro: N√£o √© um diret√≥rio: {args.pgn_folder}", file=sys.stderr)
        sys.exit(1)

    # Constr√≥i configura√ß√£o
    try:
        config = build_config(args)
    except FileNotFoundError as e:
        print(f"‚ùå Erro: {e}", file=sys.stderr)
        sys.exit(1)

    # Inicializa logger
    log_level = 'DEBUG' if args.debug else 'INFO'
    import logging
    init_logger(
        log_path=config.output.log_path,
        level=logging.DEBUG if args.debug else logging.INFO
    )

    # Banner
    print("=" * 60)
    print("  üß† PIPELINE RASHID‚ÄìTAL: An√°lise T√°tica de Xadrez")
    print("=" * 60)
    print(f"üìÅ Pasta PGN: {args.pgn_folder}")
    print(f"üîß Engine: {config.engine.path.name} (depth={config.engine.depth})")
    print(f"üíæ Output: {config.output.csv_path}")
    print(f"‚ö° Cache: {'Ativado' if config.enable_cache else 'Desativado'}")
    print("=" * 60)
    print()

    # Executa pipeline
    pipeline = RashidTalPipeline(config)
    success = pipeline.run(
        pgn_folder=args.pgn_folder,
        output_path=config.output.csv_path
    )

    # Relat√≥rio final
    print()
    print("=" * 60)
    if success:
        print("‚úÖ PIPELINE CONCLU√çDO COM SUCESSO")
        stats = pipeline.get_statistics()
        print(f"   ‚Ä¢ Jogos processados: {stats['games_processed']}")
        print(f"   ‚Ä¢ Lances analisados: {stats['moves_processed']}")
        print(f"   ‚Ä¢ Sacrif√≠cios detectados: {stats['sacrifices_found']}")
        print(f"   ‚Ä¢ Iniciativas detectadas: {stats['initiative_found']}")
        print(f"   ‚Ä¢ Tempo total: {stats['processing_time']:.1f}s")
        print(f"   ‚Ä¢ Taxa: {stats['moves_per_second']:.1f} lances/segundo")
    else:
        print("‚ùå PIPELINE FINALIZADO COM ERROS")
        print("   Verifique os logs para mais detalhes")
    print("=" * 60)

    sys.exit(0 if success else 1)


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Interrompido pelo usu√°rio")
        sys.exit(130)
    except Exception as e:
        print(f"\n\n‚ùå Erro fatal: {e}", file=sys.stderr)
        import traceback

        traceback.print_exc()
        sys.exit(1)